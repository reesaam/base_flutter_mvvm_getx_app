import 'package:flutter/material.dart';
import 'package:flutter/services.dart';

import '../../../shared/shared_models/verifier_models/regex_model/regex_model.dart';
import '../../../ui_kit/text_fields/text_field.dart';

extension ExtensionTextFieldWidgetCopyWith on AppTextField {
  AppTextField copyWith({
    TextEditingController? controller,
    UndoHistoryController? undoController,
    String? label,
    String? hint,
    double? width,
    double? height,
    EdgeInsets? padding,
    EdgeInsets? margin,
    TextInputType? textInputType,
    TextInputAction? textInputAction,
    TextDirection? textDirection,
    bool? isPassword,
    Icon? leadingIcon,
    Function()? leadingAction,
    Icon? prefixIcon,
    Function()? prefixAction,
    Icon? suffixIcon,
    Function()? suffixAction,
    Function()? wholeWidgetAction,
    Function(String)? onChangedAction,
    AppRegexModel? regexValidator,
    List<TextInputFormatter>? inputFormatters,
    bool? editable,
    bool? hasCounter,
    String? errorText,
    int? maxLines,
    int? maxLength,
    bool? showMaxLength,
    bool? expandable,
    bool? autoFocus,
    FocusNode? focusNode,
  }) =>
      AppTextField.general(
        controller: controller ?? this.controller,
        undoController: undoController,
        label: label,
        hint: hint,
        width: width,
        height: height,
        padding: padding,
        margin: margin,
        textInputType: textInputType,
        textInputAction: textInputAction,
        textDirection: textDirection,
        isPassword: isPassword,
        leadingIcon: leadingIcon,
        leadingAction: leadingAction,
        prefixIcon: prefixIcon,
        prefixAction: prefixAction,
        suffixIcon: suffixIcon,
        suffixAction: suffixAction,
        wholeWidgetAction: wholeWidgetAction,
        onChangedAction: onChangedAction,
        regexValidator: regexValidator,
        inputFormatters: inputFormatters,
        editable: editable,
        hasCounter: hasCounter,
        errorText: errorText,
        maxLines: maxLines,
        maxLength: maxLength,
        showMaxLength: showMaxLength,
        expandable: expandable,
        autoFocus: autoFocus,
        focusNode: focusNode,
      );
}
